<help>
<commands>test,set protocols,Subject Name,Protocol List,Protocols,State,init,generate_general,generate_ca,use_ca,install_ca</commands>
<cmd_generate_general params="Subject Name">Generate a general use certificate file using Bouncy Castle API. Subject Name is optional, default value is: example.com</cmd_generate_general>
<cmd_test params="">Test the certification file</cmd_test>
<cmd_set.protocols params="Protocol List">Set the ssl protocols to be used by authentication</cmd_set.protocols>
<cmd_init params="">Initialize the custom certificate store</cmd_init>
<cmd_generate_ca params="Subject Name">Generates a new CA Root Certificate. Subject Name is optional parameters. Default Value is: ah101CA</cmd_generate_ca>
<cmd_install_ca params="">Installs the CA certificate to the trusted root on the local machine. This requires the CA cert to be generated using the generate_ca command. The install requires admin privileges too.</cmd_install_ca>
<cmd_use_ca params="State">Enable or disable the signing of certificates. This requires a CA to be generated using the generate_ca command, and installed using the install_ca command. This function can get rid of SSL warnings</cmd_use_ca>
<cmd_cls params="">Clear the console screen</cmd_cls>
<cmd_exit params="">Leave SSL Certification Manager Interactive Mode</cmd_exit>
<p_Subject.Name values="Any valid string value without spaces">Defines the host name a certificate is issued for</p_Subject.Name>
<p_Protocol.List values="A list of [Protocols] separated by ',' (comma)">Defines a list of Protocols. For more help type: help param Protocols -to get the valid protocol names</p_Protocol.List>
<p_Protocols values="default,tls,tls11,tls12,sslv3,sslv2">Defines a protocol used for ssl. The default protocol is sslv3 + tlsv1</p_Protocols>
<p_State values="Positive states: enable,on,yes,start,up,|,Negative states: disable,off,no,stop,down">A valid to bool convertable value for services</p_State>
</help>